// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum Role {
  ADMIN
  USER
}



model User {
  id  String     @id @default(uuid()) @db.Text
  name String
  email String    @unique
  avatar String?
  hashedPassword String
  role Role @default(USER)
  salary  String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  teamId    String?  // This allows for a user to optionally be part of a team
  projectId String?
  project Projects? @relation(fields: [projectId], references: [id])
  team Team?  @relation(fields: [teamId], references: [id])
  jobListings    JobListing[] 


}

model Projects {
  id  String     @id @default(uuid()) @db.Text
  name String
  userCount Int?
  userId String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  users User[]
}

model Team {
  id  String     @id @default(uuid()) @db.Text
  name String
  superVisor  String
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  users User[]
}

model JobListing {
  id               String    @id @default(uuid())
  title            String
  companyName      String
  location         String
  salary           String
  type             String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  expiresAt        DateTime?
  postedAt         DateTime?
  applications     Applications[] 
  userId        String?       // New field: foreign key that references the User who created this job listing
  createdBy     User?        @relation(fields: [userId], references: [id]) 

}

model Applications {
  id    String    @id @default(uuid())
  name String
  email String
  linkedIn String
  resume String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  jobListingId     String?     
  jobListing       JobListing?   @relation(fields: [jobListingId], references: [id])
}